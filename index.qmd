# Scheduled Posts Example

This is an example of a Quarto website featuring a blog listing on the Posts page linked in the navbar. The goal is to allow two versions of this website to be published:

- [Full Website](https://leafy-zabaione-c7f6cd.netlify.app/): a full version of every `notes.qmd` file in Posts
- [Partial Website](https://fancy-salmiakki-ced67b.netlify.app/): a partial version showing only the `notes.qmd` files with dates in the past.

This repo shows two approaches to implementing this, both of which reference the dates for every post that are stored in `_schedule.yml`.


### Edit Environmental Variable

This approach doesn't fully work as-is. The issue is demonstrated by running the follow at the terminal.

`quarto render --profile edit-env`

What's happening:

1. Quarto runs a config sequence that includes building the list of all files to render and storing it as `QUARTO_PROJECT_INPUT_FILES`.
2. Then it runs `edit_render_list.R`, which gets that list, strips out files from the future, then re-sets the variable using the partial list.
3. Rendering the partial list of files into `_site-edit-env`.

The problem is that step 3 doesn't work as planned. It seems to be because once the R process from step 2 shuts down, the edited environmental variable isn't visible to the subsequent rendering process. There is probably a way to pass this variable through a file, but I'm not sure how to do that.

### Ignoring future posts

This approach seems to work and was used to build the sites linked above. See it by running the following two lines at the terminal.

`Rscript ignore_future_docs.R`

`quarto render --profile ignore-future`

What's happening:

1. The R script `ignore_future_docs.R` adds a `_` to the start of the directory for any posts in the future. By the Render Targets feature of Quarto Projects, these files will be ignored during the rendering process. This can't be added as a pre-render script because the list of files to render, `QUARTO_PROJECT_INPUT_FILES`, is made before the pre-render script is run.
2. Quarto renders the unignored files into `_site-ignore-future`.
3. It runs a post-render script, `unignore_future_docs.R`, to undo the changes that we made to the paths of the future posts.


## Publishing Details

The website linked above were built using the Ignore Future Posts approach. Both sites are published on Netlify via GHA. See `.github/workflow` for details.
